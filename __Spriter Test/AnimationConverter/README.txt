Animation Converter v 1.0.0
by AbstractConcept

The purpose of thisÂ application is to greatly improve the experience of making custom animations for the RimJobWorld Animation Framework (RAF), created by c0ffeeeee. It allows you to convert animations created in Spriter, by BrashMonkey, into a format readable by the RAF (this application is compatible with the free version of Spriter!)

The application file is an .exe, but the full source code has been included, so you are very welcome to read through the code and then compile it yourself

** Note that, at present, this conversion tool only generates the animationStages needed for the AnimationDef; you will need to manually specify the animation's defName, the actor types involved, body type offsets, etc. If this tool gains some popularity, a more complex animation creation wizard might be developed **

For best results, make sure to read ALL the instructions listed below!

As this is the first release of this tool, there may be bugs. If something stranges occurs that isn't covered by the below instructions, please leave a comment

--== Instructions on setting up your Spriter .scml files for conversion ==--
- Create a new folder to house your Spriter project
- Copy the folder marked "AnimationTextures" into this new folder
- Open Spriter and create a new project in your project folder
- Double-check that the "AnimationTextures" folder appears in your palette. Note that whenever you plan to use a texture from the palette, first check that the default pivot point is set the centre of the image, otherwise your actors will not animate correctly in game. Also note that the actual textures you use for creating your animations in Spriter is not important; they are not recorded! These textures only provide a visual guide as to where you should place and orient your actors. You can add other textures to your palette if you wish, just make sure that the texture file is named either "0", "1", "2" or "3", and faces north, east, south or west, respectively; this is how the converter tracks the facing of the actors
- Drag a head or body textures into the main scene to create a new actor. Actors must have a unique name, so rename newly placed textures in the 'Z-order' or 'Hierarchy' list with a unique name plus the suffix "_head" or "_body", as appropriate. Textures which do not include a "_head" or "_body" suffix will be ignored by the converter and will not be used to create an actor. For example, an animation intending to involve a male and female actor might have a Hierarchy list that reads "HumanFemale1_head", "HumanFemale1_body", "HumanMale1_head" and "HumanMale1_body". There is no limit to the number of actors that can be added, but each actor MUST have a head and a body, otherwise the conversion will fail. Note that the actor order in the converted animation is determined by the order textures are pulled into the scene; changing their arrangement in the Z-order list will have no affect on the actor order (also note that the RAF requires that female actors be placed at the forefront of the actor order, so they must be created first in Spriter)
- Under the animations tab there should be only one entity listed; entities listed after the first will be ignored by the converter
- Add a new animation to your entity for each animation stage you desire in the converted animation. E.g., you might have three animation stages, named "Start", Middle" and "Finish". Note that animation timings in Spriter are in milliseconds, not RimWorld ticks (one tick = 10 ms). E.g., the length of a one second animation is 1000 ms, or 100 ticks. However, feel free to create your timelines either in milliseconds or with ticks in mind, as there is an option in the conversion tool to convert animation timings from milliseconds to ticks. Just make sure you are consistent in your use of timing scales! If your animation timelines are designed with ticks in mind, you will need to slow the animation previewer to 10% playback speed in order to see how it will appear in-game
- Start animating! Note that animation bones aren't supported by the converter. Also, if you want your animations to loop cleanly, each animating object should have a keyframe placed at the very end of the timeline which is identical to the first keyframe. The easiest way to achieve this is to make sure "Repeat Playback" is toggled on, navigating to the end of the timeline, and then clicking "Key All". Make sure the number of actors, and their names, are consistent across all animations or you will encounter errors 
- If you want to change the orientation of a head or body during an animation, make sure you use Spriter's swap tool instead of a pulling a new texture into the scene (this would create a new actor, or override an old one!); to swap a texture, click on the texture in the scene that you wish to swap, then go to your palette and navigate to the texture which has the orientation you plan to use. Right click on the replacement texture, and then click "replace selected sprite image"
- When your done animating, save the project (be sure to save frequently, Spriter crashes more often than you'll like...)! The project .scml file is now ready for conversion

--== Instructions on how to use the conversion application ==--
- Open the application
- Select the Spriter .scml file to convert by either pasting the file name into the text box, or clicking the 'SCML file to convert' button and navigating to the file using the browser that opens
- Click on the tick box if you wish to convert the Spriter animation times from milliseconds into RimWorld ticks
- Adjust the X-Z offset scaling, if needed (change this value only if the X-Z offsets for the actors are obviously wrong; in theory this should only be necessary if you were to create your animations using sprites that are not the same scale as the sprites packaged with this tool)
- Click start conversion. The formatted XML data will appear in the text box below. Copy and paste the animation stage data into your animation file. You will need to manually specify in the animation stages whether ther are actors should be a layer differen to "Pawn", and when sound events should trigger. If you would like an animation stage to loop multiple times, you will need multiply the "playTimeTicks" value for the animation stage in question by the number times you wish for it to loop (e.g., if you want an animation stage that is 101 ticks long to repeat three times before moving to the next stage, replace the value of 101 with a value of 303)
